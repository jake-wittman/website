{
  "hash": "90af397c128933f8a7e06aa72bed0876",
  "result": {
    "markdown": "---\ntitle: \"Docker notes\" # <---- UPDATE ME\ndescription:\n  Not a full blog post, mostly just my own notes.Learning how to use docker for professional reasons and for my Plex server. # <---- UPDATE ME\nauthor:\n  - first_name: \"Jake\"\n    last_name: \"Wittman\"\n    url: https://wittja01.github.io/website/\ndate: 2022-08-28\nimage: preview.jpg\nlicense: CC BY\ncategories: docker, notes\nrepository_url: https://github.com/wittja01/website\nparams:\n  slug: learning-docker\n  date: 2022-08-28\n  repo: wittja01/website\n  site: https://wittja01.github.io/website\ndraft: false\n---\n\n\n<!----\nUse \nrefinery::use_article_template(\n    template = \"_templates/standard_template.Rmd\",\n    slug = \"how-cold-is-too-cold\", \n    date = \"2022-01-11\",\n    renv_new = TRUE\n)\nto generate new post\n\nchecklist:\n  - check the \"update me\" messages in YAML above\n  - initialise the _renv folder with refinery::renv_new(\"name of post folder\")\n  - populate the lockfile with refinery::renv_snapshot(\"name of post folder\")\n  - update the _renv folder from snapshot with refinery::restore(\"name of post folder\")\n\n---->\n\n\n<!--------------- setup post ----------------->\n\n\n\n\n\n\n<!--------------- post ----------------->\n\nI want to learn how to use docker, since it seems like a really important technology to understand as a data scientist. I also happen to have a Plex server, which is currently running on my main PC. At some point in the near future, I'd like to get it set up on it's own machine and use a series of docker containers to run all my different programs.The purpose of this blog post is mostly for myself - I'm using it as a place to store some notes I'll make that I can reference later. For reference, I am using [this tutorial](https://docker-curriculum.com/#sf-food-trucks).\n\nUseful docker commands:\n`docker run -it CONTAINER sh` Opens an interactive terminal in the container\n`docker rm ID` - removes a container. Leaving empty containers littering your hard drive eats up space. \n`docker rm $(docker ps -a -q -f status=exited)` Useful for removing all exited containers. `-q` flag returns only numeric IDs and `-f` filters output based on conditions.\n`docker container prune` I guess this is available in later version instead of the previous one to remove all stopped containers\n`docker run --rm` removes a container once it is exited\n`docker rmi` Delete images no longer needed\n`docker ps -a` see all exited containers (I think)\n`docker -d -P --name name` -d detaches terminal from container (so we can close terminal and container still runs), -P published exposed ports, and --name name lets us name our container \"name\"\n`docker run -p 8888:80 prakhar1989/static-site` will let you specify a custom port to which client will forward connections to the container.\n`docker port static-site` lets you see what port is being used\n`docker network create nameofnetwork-net` create a bridge network, I believe\n`docker run -d --name NAME --net nameofnetwork-net -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.sometotherstuff` not 100% sure what all of this is doing. --net tells the container to start in a network. Not sure what -e is.\n\nAlso - I should check out Docker Compose at some point, as I think that'll be useful for my Plex Server. It basically should allow me to set up a single file to start all the relevant apps up in their own containers.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}