{
  "hash": "518cc1a5dade37ae3208fb9c6f84cfe3",
  "result": {
    "markdown": "---\ntitle: \"Generative Art! Part 1\" # <---- UPDATE ME\ndescription:\n  Working through Danielle Navarro's workshop on generative art # <---- UPDATE ME\nauthor:\n  - first_name: \"Jake\"\n    last_name: \"Wittman\"\n    url: https://wittja01.github.io/website/\ndate: 2022-08-19\n#image: ####.jpg  # <---- UPDATE ME \ncreative_commons: CC BY\ncitation_url: https://wittja01.github.io/website/generative-art-1\nrepository_url: https://github.com/wittja01/website\noutput:\n  distill::distill_article:\n    self_contained: false\nparams:\n  slug: generative_art_1\n  date: 2022-08-19\n  repo: wittja01/personal_website\n  site: https://wittja01.github.io/personal_website\ndraft: false\n---\n\n\n<!----\nUse \nrefinery::use_article_template(\n    template = \"_templates/standard_template.Rmd\",\n    slug = \"how-cold-is-too-cold\", \n    date = \"2022-01-11\",\n    renv_new = TRUE\n)\nto generate new post\n\nchecklist:\n  - check the \"update me\" messages in YAML above\n  - initialise the _renv folder with refinery::renv_new(\"name of post folder\")\n  - populate the lockfile with refinery::renv_snapshot(\"name of post folder\")\n  - update the _renv folder from snapshot with refinery::restore(\"name of post folder\")\n\n---->\n\n\n<!--------------- setup post ----------------->\n\n\n\n\n\n\n<!--------------- post ----------------->\n\nI've been following Danielle Navarro and Thomas Lin Pederson on Twitter for some time. These two introduced me to generative art, and I kind of love the art they make. I love the idea of taking data and making artwork from it, through transformations or choices in how to display or map the data to the visualization. When I found out Danielle had made her workshop available as a [webpage](https://art-from-code.netlify.app/day-1/session-1/), I was real excited to work through it. So, here I am! I'll be reproducing some of her code here just for my own edification, and also working through some of the exercises she provides. This post will just be working through her very first section on technique and color. I'll tackle the others later.\n\nFirst, let's take just a few minutes and try to make some art out of mpg like directed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'magrittr' was built under R version 4.0.5\n```\n:::\n\n```{.r .cell-code}\nmpg %>% \n   ggplot(aes(x = hwy, y = cty)) +\n   geom_point(aes(color = displ, size = displ), show.legend = FALSE) + \n   #geom_point(color = 'white', shape = 4) +\n   coord_polar() +\n   theme_void() +\n   scale_color_distiller(type = 'div')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nOkay! It's a thing. Not my favorite thing, but it's a thing.\n\nNow on to using the polar art function she provided.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art <- function(seed, n, palette) {\n  \n  # set the state of the random number generator\n  set.seed(seed)\n  \n  # data frame containing random values for \n  # aesthetics we might want to use in the art\n  dat <- tibble(\n    x0 = runif(n),\n    y0 = runif(n),\n    x1 = x0 + runif(n, min = -.2, max = .2),\n    y1 = y0 + runif(n, min = -.2, max = .2),\n    shade = runif(n), \n    size = runif(n)\n  )\n  \n  # plot segments in various colours, using \n  # polar coordinates and a gradient palette\n  dat %>%  \n    ggplot(aes(\n      x = x0,\n      y = y0,\n      xend = x1,\n      yend = y1,\n      colour = shade,\n      size = size\n    )) +\n    geom_segment(show.legend = FALSE) +\n    coord_polar() +\n    scale_y_continuous(expand = c(0, 0)) +\n    scale_x_continuous(expand = c(0, 0)) + \n    scale_colour_gradientn(colours = palette) + \n    scale_size(range = c(0, 10)) + \n    theme_void()\n}\n\npolar_art(seed = 314, n = 50, c('green', 'purple', 'pink'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\npolar_art(seed = 314, n = 100, c('green', 'purple', 'blue', 'yellow', 'orange'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\npolar_art(seed = 314, n = 80, c('red', 'black', 'blue'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\npolar_art(seed = 314, n = 500, c('green', 'black', 'grey'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-4.png){width=672}\n:::\n:::\n\n\nNow I'm supposed to try editing the polar art to create my own system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art2 <- function(seed, n, palette) {\n  \n  # set the state of the random number generator\n  set.seed(seed)\n  \n  # data frame containing random values for \n  # aesthetics we might want to use in the art\n  dat <- tibble(\n    x0 = runif(n),\n    y0 = runif(n),\n    x1 = x0 + rnorm(n, sd = 10),\n    y1 = y0 + rnorm(n, sd = 10),\n    shade = runif(n), \n    size = runif(n)\n  )\n  \n  # plot segments in various colours, using \n  # polar coordinates and a gradient palette\n  dat %>%  \n    ggplot(aes(\n      x = x0,\n      y = y0,\n      xend = x1,\n      yend = y1,\n      colour = shade,\n      size = size\n    )) +\n    geom_curve(show.legend = FALSE) +\n    scale_y_continuous(expand = c(0, 0)) +\n    scale_x_continuous(expand = c(0, 0)) + \n    scale_colour_gradientn(colours = palette) + \n    scale_size(range = c(0, 5)) + \n    theme_void()\n}\n```\n:::\n\n\nThis new function drops the coord_polar, so I probably should rename it from polar_art, but I'm feeling a bit lazy. I might call this one \"Windmill Art\". I kind of like how using a normal distribution for the ends causes some \"outliers\" to appear that are much longer than the others.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n(polar_art2(seed = 20, n = 50, c('red', 'yellow', 'blue')) +\npolar_art2(seed = 98765431, n = 100, c('red', 'yellow', 'blue'))) /\n(polar_art2(seed = 421, n = 200, c('green', 'yellow', 'blue')) +\npolar_art2(seed = 3256, n = 20, c(\"#001021\",\"#034748\",\"#1481ba\",\"#11b5e4\",\"#0caadc\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Colors\n\nThe [coolors.co](coolors.co) website that Danielle introduces us to seems really awesome for generating custom color palettes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\nlibrary(ggthemes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggthemes' was built under R version 4.0.5\n```\n:::\n\n```{.r .cell-code}\nshow_col(c(\"#001021\",\"#034748\",\"#1481ba\",\"#11b5e4\",\"#0caadc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe `scale_color_gradientn()` function will generate a sequence of colors interpolated between your chosen palette, or it can be done manually using `colorRampPalette()`. Note that `colorRampPalette()` actually returns a function that takes an integer to specify how many colors to return.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorRampPalette(c(\"#001021\",\"#034748\",\"#1481ba\",\"#11b5e4\",\"#0caadc\"))(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"#001021\" \"#001222\" \"#001424\" \"#001625\" \"#001827\" \"#001B28\" \"#001D2A\"\n  [8] \"#001F2C\" \"#00212D\" \"#01242F\" \"#012630\" \"#012832\" \"#012A33\" \"#012C35\"\n [15] \"#012F37\" \"#013138\" \"#01333A\" \"#02353B\" \"#02383D\" \"#023A3E\" \"#023C40\"\n [22] \"#023E42\" \"#024043\" \"#024345\" \"#024546\" \"#034749\" \"#03494D\" \"#044C52\"\n [29] \"#054E56\" \"#05505B\" \"#065360\" \"#075564\" \"#075769\" \"#085A6E\" \"#095C72\"\n [36] \"#0A5F77\" \"#0A617B\" \"#0B6380\" \"#0C6685\" \"#0C6889\" \"#0D6A8E\" \"#0E6D92\"\n [43] \"#0E6F97\" \"#0F719C\" \"#1074A0\" \"#1076A5\" \"#1178A9\" \"#127BAE\" \"#127DB3\"\n [50] \"#137FB7\" \"#1382BA\" \"#1384BC\" \"#1386BE\" \"#1388BF\" \"#138AC1\" \"#138CC3\"\n [57] \"#138EC5\" \"#1390C6\" \"#1292C8\" \"#1294CA\" \"#1297CB\" \"#1299CD\" \"#129BCF\"\n [64] \"#129DD0\" \"#129FD2\" \"#12A1D4\" \"#12A3D6\" \"#11A5D7\" \"#11A7D9\" \"#11A9DB\"\n [71] \"#11ACDC\" \"#11AEDE\" \"#11B0E0\" \"#11B2E1\" \"#11B4E3\" \"#10B4E3\" \"#10B4E3\"\n [78] \"#10B3E3\" \"#10B3E2\" \"#10B2E2\" \"#0FB2E2\" \"#0FB2E1\" \"#0FB1E1\" \"#0FB1E1\"\n [85] \"#0FB0E0\" \"#0EB0E0\" \"#0EAFE0\" \"#0EAFDF\" \"#0EAEDF\" \"#0EAEDF\" \"#0DAEDE\"\n [92] \"#0DADDE\" \"#0DADDE\" \"#0DACDD\" \"#0DACDD\" \"#0CABDD\" \"#0CABDC\" \"#0CAADC\"\n [99] \"#0CAADC\" \"#0CAADC\"\n```\n:::\n\n```{.r .cell-code}\nshow_col(colorRampPalette(c(\"#001021\",\"#034748\",\"#1481ba\",\"#11b5e4\",\"#0caadc\"))(100))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nTo visualize the colors as a smooth palette:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage(\n  x = matrix(1:100, ncol = 1), \n  col = colorRampPalette(c(\"#001021\",\"#034748\",\"#1481ba\",\"#11b5e4\",\"#0caadc\"))(50),\n  useRaster = TRUE,\n  axes = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nCan get other palettes from `canva_palettes` from ggthemes\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_col(canva_palettes[[23]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nCould write a function that randomly samples a palette from these palettes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_canva <- function(seed = NULL) {\n  if(!is.null(seed)) set.seed(seed)\n  sample(ggthemes::canva_palettes, 1)[[1]]\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art(seed = 2, n = 100, palette = sample_canva(seed = 120)) +\npolar_art(seed = 2, n = 100, palette = sample_canva(seed = 82)) +\npolar_art(seed = 2, n = 100, palette = sample_canva(seed = 44))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nOr if I want to use the same palette but vary the art\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art(seed = 26123, n = 100, palette = sample_canva(seed = 82)) +\npolar_art(seed = 243, n = 100, palette = sample_canva(seed = 82)) +\npolar_art(seed = 12342, n = 100, palette = sample_canva(seed = 82))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nNow, time to try creating my own function to sample random colors to build a completely random palette.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_named_colours <- function(n) {\n   sample(colours(distinct = TRUE), n)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art(seed = 29, n = 50, palette = sample_named_colours(8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This function should randomly sample from the 600 distinct colors available\n# from canva\nrandom_sample_canva <- function(n) {\n   sample(unlist(canva_palettes), n)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art(seed = 29, n = 500, palette = random_sample_canva(120))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe polar art function is nice, but it doesn't give a lot of control. Danielle provides some code to separate out the data generation from the plotting, and also sets up the plot function so we can alter the geom we are plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_data <- function(seed = NULL, n = 100){\n  if(!is.null(seed)) set.seed(seed)\n  dat <- tibble(\n    x0 = runif(n),\n    y0 = runif(n),\n    x1 = x0 + runif(n, min = -.2, max = .2),\n    y1 = y0 + runif(n, min = -.2, max = .2),\n    shade = runif(n), \n    size = runif(n),\n    shape = factor(sample(0:22, size = n, replace = TRUE))\n  )\n}\npolar_styled_plot <- function(data = NULL, palette) {\n  ggplot(\n    data = data,\n    mapping = aes(\n      x = x0,\n      y = y0,\n      xend = x1,\n      yend = y1,\n      colour = shade,\n      size = size\n    )) + \n    coord_polar(clip = \"off\") +\n    scale_y_continuous(\n      expand = c(0, 0),\n      limits = c(0, 1), \n      oob = scales::oob_keep\n    ) +\n    scale_x_continuous(\n      expand = c(0, 0), \n      limits = c(0, 1), \n      oob = scales::oob_keep\n    ) + \n    scale_colour_gradientn(colours = palette) + \n    scale_size(range = c(0, 10)) + \n    theme_void() + \n    guides(\n      colour = guide_none(),\n      size = guide_none(),\n      fill = guide_none(),\n      shape = guide_none()\n    )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- sample_data(n = 100, seed = 1231) \npal <- sample_canva(seed = 63)\n\npolar_styled_plot(data = dat, palette = pal) + geom_segment() +\npolar_styled_plot(data = dat, palette = pal) + geom_path() +\npolar_styled_plot(data = dat, palette = pal) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nThis style of function writing also allows us to construct pieces that combine multiple geoms and/or data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndat1 <- sample_data(n = 2000, seed = 1223) \ndat2 <- sample_data(n = 100, seed = 4536)  %>%   \n  mutate(y0 = .3 + y0 * .6, y1 = .3)\n\npolar_styled_plot(palette = sample_canva(seed = 7)) + \n  geom_segment(\n    data = dat1  %>%  mutate(size = size * 3)\n  ) + \n  geom_segment(\n    data = dat2 %>% mutate(size = size / 5), \n    lineend = \"round\", \n    colour = \"white\"\n  ) +\n  geom_segment(\n    data = dat2 %>% mutate(size = size / 40), \n    lineend = \"round\", \n    colour = \"#222222\"\n  ) +\n  geom_point(\n    data = dat2 %>% mutate(size = size * 2),\n    colour = \"#222222\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nAlright, now time to try this on my own. For this next exercise I'm supposed to use the sample_data(), polar_styled_plot() and adding different geoms to make my own pieces. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- sample_data(n = 50, seed = 54267)\ndat2 <- sample_data(n = 20, seed = 123)\ndat3 <- sample_data(n = 100, seed = 54573)\n\n# I think I'll use this one as the preview image for the blog\npolar_styled_plot(palette = sample_canva(seed = 10928)) +\n   geom_point(data = dat3, aes(size = size)) +\n   geom_line(data = dat1, aes(size = size / 20))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave('posts/2022-08-19_generative_art_1/preview.jpg')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\npolar_styled_plot(palette = sample_canva(seed = 4346)) +\n   geom_point(data = dat2, size = 6) +\n   geom_line(data = dat2, size = 0.5) +\n   geom_point(data = dat2%>% mutate(y1 = y1 - 0.8, x0 = x1 - 0.2), \n              size = 6) +\n   geom_line(data = dat2 %>% mutate(y1 = y1 - 0.8, x0 = x1 - 0.2),\n             size = 0.5) +\n   geom_point(data = dat2%>% mutate(y1 = y1 + 0.4, x0 = x0 - 0.2), \n              size = 6) +\n   geom_line(data = dat2 %>% mutate(y1 = y1 + 0.4, x0 = x0 - 0.2),\n             size = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\nI think I like the first of these two better. It's kind of got an aggressive toddler connecting the dots vibe that I like. The other one feels a bit kitschy to me. This is lots of fun! I have almost no other artistic talents, so this is a cool way to express myself and try to find aesthestics that I enjoy. I look forward to working through more of these tutorials as time allows.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}